---
import Layout from '../layouts/Layout.astro';
import ContextAlert from '../components/ContextAlert.astro';
import Markdown from '../components/Markdown.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

// Get all pages
const allPages = await getCollection('pages');

// Extract topics from directory structure
const topicsMap = new Map<string, Set<string>>();

// Properly type the collection entries
type PageEntry = CollectionEntry<'pages'>;
// Use type assertion pattern instead of interface extension
type PageEntryWithSlug = PageEntry & { slug: string };

// Use proper typing for the collection entry
allPages.forEach((page) => {
    // TypeScript workaround to access slug property
    const typedPage = page as PageEntryWithSlug;
    const pathParts = typedPage.slug.split('/');

    if (pathParts.length > 0) {
        const topic = pathParts[0];
        const subtopic = pathParts.length > 1 ? pathParts[1] : null;

        if (!topicsMap.has(topic)) {
            topicsMap.set(topic, new Set<string>());
        }

        if (subtopic) {
            topicsMap.get(topic)!.add(subtopic);
        }
    }
});

// Convert the Map to an array of objects for easier template rendering
const topics = Array.from(topicsMap.entries()).map(([topicName, subtopics]) => ({
    name: topicName,
    subtopics: Array.from(subtopics)
}));

// Featured pages (if any)
const featuredPages = allPages.filter((page) => page.data.featured);

// Fix for lastUpdated - ensure it's a Date object before calling toLocaleDateString
const formattedFeaturedPages = featuredPages.map((page) => {
    const typedPage = page as PageEntryWithSlug;
    return {
        ...page,
        slug: typedPage.slug,
        formattedDate:
            page.data.lastUpdated instanceof Date
                ? page.data.lastUpdated.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                  })
                : 'Date not available'
    };
});

const explainer = `
# Thai Dreams

Follow a quirky Digital Nomad couple through their adventures in Thailand.
`;
---

<Layout title="Content Hub">
    <ContextAlert message="Welcome to the content hub" class="mb-4" />
    <Markdown content={explainer} class="mb-10" />

    <!-- Featured Pages Section -->
    {
        featuredPages.length > 0 && (
            <div class="mb-12">
                <h2 class="mb-4">Featured Content</h2>
                <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
                    {formattedFeaturedPages.map((page) => (
                        <div class="p-6 bg-white rounded-lg shadow-md">
                            <h3 class="mb-2 text-xl font-semibold text-gray-800">{page.data.title}</h3>
                            <p class="mb-4 text-gray-600">{page.data.description}</p>
                            <div class="flex items-center justify-between">
                                <span class="text-sm text-gray-500">{page.formattedDate}</span>
                                <a href={`/${page.slug}`} class="text-blue-500 hover:underline">
                                    Read more â†’
                                </a>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        )
    }

    <!-- Topics Section -->
    <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
        {
            topics.map((topic) => (
                <div class="p-6 bg-white rounded-lg shadow-md">
                    <h2 class="mb-4 text-xl font-semibold text-gray-800 capitalize">{topic.name.replace(/-/g, ' ')}</h2>
                    {topic.subtopics.length > 0 ? (
                        <ul class="space-y-2">
                            {topic.subtopics.map((subtopic) => (
                                <li>
                                    <a href={`/${topic.name}/${subtopic}`} class="text-blue-500 hover:underline capitalize">
                                        {subtopic.replace(/-/g, ' ')}
                                    </a>
                                </li>
                            ))}
                        </ul>
                    ) : (
                        <p class="text-gray-600">No subcategories found.</p>
                    )}
                </div>
            ))
        }
    </div>
</Layout>
