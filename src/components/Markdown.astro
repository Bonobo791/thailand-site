---
import { marked } from 'marked';
import markedShiki from 'marked-shiki';
import { createHighlighter } from 'shiki';

export interface Props {
    content: string;
    class?: string;
}

const { content, class: className = '' } = Astro.props;

// `createHighlighter` is async, it initializes the internal and
// loads the languages and themes specified.
// Then later you can use `highlighter.codeToHtml` synchronously
// with the loaded themes and languages.
const highlighter = await createHighlighter({
    langs: ['jsx', 'js'],
    themes: ['min-dark']
});

// Register the markedâ€‘shiki extension with marked.
marked.use(
    markedShiki({
        highlight(code: string, lang: string, props: any) {
            return highlighter.codeToHtml(code, {
                lang,
                theme: 'min-dark'
            });
        }
    })
);

// Parse the Markdown content.
const html = await marked.parse(content || '');
---

<div class={`markdown-content ${className}`}>
    <Fragment set:html={html} />
</div>
